nodejs의 기초
-브라우저 밖에서 자바스크립트 코드를 실행할 수 있다.
-크롬에서 사용하는 V8엔진을 사용한다.
-이벤트 기반의 비동기 I/O 프레임워크
- CommonJS 를 구현한 모듈 시스템

비동기 I/O 프레임워크 ?!
- 클라이언트가 Node.js서버에 요청한다.
- 자체적으로 이벤트 루프 로직에서 주기적으로 순환하며, 이벤트를 처리한다.
- 간단한 이벤트는 바로 클라이언트에게 응답을 하겠지만 , 무거운 요청인 경우!
- 이벤트 루프가 혼자 처리할 수 없는 무거운 이벤트는 다른 쓰레드가 처리 한다.(파일을 읽거나, DB관련)
- 노드는 Single thread 플랫폼 ! (실제로 스레드는 여러개지만, main 이벤트 루프가 싱글 스레드이기 때문이다.)
- Non-blocking worker(스레드)가 처리된 이벤트가 있으면 처리해준다.
- 비동기인 이유는 비동기적으로 worker에게 이벤트를 주기 때문에 ! 


모듈 시스템
-브라우저에서는 윈도우 컨텍스트를 사용하거나, RequireJS 같은 의존성 로더를 사용!
-노드는 파일형태로 모듈을 관리할 수 있는 CommonJS로 구현
    - 기본 모듈 : node가 설치되었다면 사용할 수 있는 모듈
        const util = require('util')
        const name = 'World'
        const msg = util.format('Hello %s', name)

        console.log(msg)    // "Hello World
    - 써드파티 모듈 : 대표적으로 express 가 있다. (미리 만들어진 모듈)      써드파티 모듈은 npm을 통해 install 해서 사용한다.
    - 사용자 정의 모듈
        // math.js
        const math = {
            add(a,b) {
                return a + b
            }
        }
        module.exports = math   // math 객체를 모듈화 해준다.

        //index.js
        const math = require('./math')
        console.log(math.add(1,2))  //3


비동기 세계
-노드는 기본적으로 비동기로 동작함
-readFile() vs readFileSync()   

readFileSync()

//test.txt
테스트 파일입니다.

//index.js
// fs(파일 시스템)
const fs = require('fs')

const file = fs.readFileSync('test.txt',{
    encoding: 'utf8'
})

console.log(file)   // "테스트 파일입니다."



readFile()  //비동기적으로 처리!

const fs = require('fs')

const file = fs.readFile('test.txt', {
    encoding: 'utf8'
}), (err,data) => console.log(file))    //'테스트 파일입니다'

