nodejs의 기초
-브라우저 밖에서 자바스크립트 코드를 실행할 수 있다.
-크롬에서 사용하는 V8엔진을 사용한다.
-이벤트 기반의 비동기 I/O 프레임워크
- CommonJS 를 구현한 모듈 시스템

비동기 I/O 프레임워크 ?!
- 클라이언트가 Node.js서버에 요청한다.
- 자체적으로 이벤트 루프 로직에서 주기적으로 순환하며, 이벤트를 처리한다.
- 간단한 이벤트는 바로 클라이언트에게 응답을 하겠지만 , 무거운 요청인 경우!
- 이벤트 루프가 혼자 처리할 수 없는 무거운 이벤트는 다른 쓰레드가 처리 한다.(파일을 읽거나, DB관련)
- 노드는 Single thread 플랫폼 ! (실제로 스레드는 여러개지만, main 이벤트 루프가 싱글 스레드이기 때문이다.)
- Non-blocking worker(스레드)가 처리된 이벤트가 있으면 처리해준다.
- 비동기인 이유는 비동기적으로 worker에게 이벤트를 주기 때문에 ! 


모듈 시스템
-브라우저에서는 윈도우 컨텍스트를 사용하거나, RequireJS 같은 의존성 로더를 사용!
-노드는 파일형태로 모듈을 관리할 수 있는 CommonJS로 구현
    - 기본 모듈 : node가 설치되었다면 사용할 수 있는 모듈
        const util = require('util')
        const name = 'World'
        const msg = util.format('Hello %s', name)

        console.log(msg)    // "Hello World
    - 써드파티 모듈 : 대표적으로 express 가 있다. (미리 만들어진 모듈)      써드파티 모듈은 npm을 통해 install 해서 사용한다.
    - 사용자 정의 모듈
        // math.js
        const math = {
            add(a,b) {
                return a + b
            }
        }
        module.exports = math   // math 객체를 모듈화 해준다.

        //index.js
        const math = require('./math')
        console.log(math.add(1,2))  //3


비동기 세계
-노드는 기본적으로 비동기로 동작함
-readFile() vs readFileSync()   

readFileSync()

//test.txt
테스트 파일입니다.

//index.js
// fs(파일 시스템)
const fs = require('fs')

const file = fs.readFileSync('test.txt',{
    encoding: 'utf8'
})

console.log(file)   // "테스트 파일입니다."



readFile()  //비동기적으로 처리!

-* Express.js 역할 및 구조의 이해 *-

const fs = require('fs')

const file = fs.readFile('test.txt', {
    encoding: 'utf8'
}), (err,data) => console.log(file))    //'테스트 파일입니다'

// url 의 뒤에 users로 요청했을때의 응답
else if(req.url === '/users') {
        const users = [
            {name : 'Alice'},
            {name : 'Beck'}
        ];
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        // JSON을 불러왹 위해서는 setHeader도 변경해야 한다.
        res.end(JSON.stringify(users));
    }

개발을 계속해나가다 보면 중복이 일어날 수 있고, 그런것들을 리펙토링한다.

Express.JS

-Application
    -익스프레스 인스턴스를 어플리케이션이라 한다.
    -서버에 필요한 기능인 미들웨어를 어플리케이션에 추가한다.
    -라우팅 설정을 할 수 있다. 
    -서버를 요청 대기 상태로 만들 수 있다. (app.listen)

-미들웨어 : 서버의 뼈대 사이사이에 필요한 기능들을 채운다.
    -미들웨어는 함수들의 연속이다
    -로깅 미들웨어를 만들어보자
    -써드파티 미들웨어를 사용해 보자
    -일반 미들웨어 vs 에러 미들웨어

-라우팅 : 요청에 따라 다른 로직을 수행해준다.
    - 요청 url에 대해 적절한 핸들러 함수로 연결해 주는 기능을 라우팅이라고 부른다.
    - 어플리케이션의 get(), post() 메소드로 구현할 수 있다.
    - 라우팅을 위한 전용 Router 클래스를 사용할 수도 있다.

-요청 객체 : req
    -클라이언트 요청 정보를 담은 객체를 요청(Request)객체라고 한다.
    - http 모듈의 request 객체를 래핑한 것이다.
    - req.params() , req.query(), req.body() 메소드를 주로 사용한다.

-응답 객체 : res
    -클라이언트 응답 정보를 담은 객체를 응답(Response)객체 라고 한다.
    -http모듈의 response 객체를 래핑한 것이다.
    -res.send(), res.status(), res.json() 메소드를 주로 사용한다.